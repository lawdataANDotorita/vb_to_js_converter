*&*
<script\s+((language\s*=\s*["]?\s*vbscript\s*["]?)|(type\s*=\s*["]?\s*text[\/\\]vbscript\s*["]?))[ \t]*>
*^*
<script type="text/javascript">
*&*

*&*
<script.+for=["]?([^\s"]+)["]?.+?event=["]?([^\s()"]+).+(\n)((.|\n|\r|\t)+)</script>
*^*
<script type="text/javascript" title="jsevnthndlr">$3document.getElementById("$1").$2=function(){$3$4}$3</script>
*&*

/* replacing with a space char */
*&*
\s*_[ \t]*[\n\r]+\s*
*^*
 
*&*


*&*
document\.all\s*\(
*^*
document.getElementById(
*&*

*&*
document\.all\.([^.]*)\.
*^*
document.getElementById("$1").
*&*

*&*
innerText
*^*
innerHTML
*&*


*&*
((\n)\s*function[ \t]+(\w+).*\n)((.|\s)*?)end[ \t]+function
*^*
$1var $3$2$4return $3$2end function
*&*

*&*
([ \t]*)function[ \t]+([^(\n\r]+)([ \t]*[\r\n]+)
*^*
$1function $2()$3
*&*


/* not 'end function' but function start */
*&*
([ \t]*)function[ \t]+([^\n\r]+)
*^*
$1function $2 {
*&*


*&*
end[ \t]+function
*^*
}
*&*


/* we need two templates to deal with for x=i to j step i and for x = i to j step -i, because each state requires different chars (<= >=) that are not found in the original vb statement*/
*&*
for\s+([^=\s]+)\s*=\s*(.+?)\s+to\s+(.+?)(step\s*([-])(\d+))([ \t]*[\r\n]+)
*^*
for (var $1=$2;$1>=$3;$1$5=$6){$7
*&*

/* we need two templates to deal with for x=i to j step i and for x = i to j step -i, because each state requires different chars (<= >=) that are not found in the original vb statement*/
*&*
for\s+([^=\s]+)\s*=\s*(.+?)\s+to\s+(.+?)(step\s*([+]*)(\d+))([ \t]*[\r\n]+)
*^*
for (var $1=$2;$1<=$3;$1+=$6){$7
*&*

/* we must handle the for step template first and then arrive at the simple for statement*/
*&*
for\s+([^=\s]+)\s*=\s*(.+?)\s+to\s+(.+?)([ \t]*[\r\n]+)
*^*
for (var $1=$2;$1<=$3;$1++){$4
*&*


*&*
while[\s]*([^\r\n]+)
*^*
while ($1){
*&*

*&*
([^\w])exit([^\w])*(do|for)
*^*
$1break
*&*

*&*
(\s*)do(\s+)
*^*
$1
*&*

#shay - bookmark1


*&*
(\s+)next(\s+)
*^*
$1}$2
*&*

*&*
(\s+)loop(\s+)
*^*
$1}$2
*&*

*&*
(\s+)wend(\s+)
*^*
$1}$2
*&*

/* with parentheses encircling the arg*/
*&*
msgbox\s*(\(([^\r\n]*)\))
*^*
alert $1
*&*

/* without parentheses encircling the arg*/
*&*
msgbox\s*([^(\s]([^\r\n]*))
*^*
alert($1)
*&*

/* replacing = with == must be before if then conversion, because it relies on it*/
/* one more thins - we condiser the possibility of a complicated condition contaiing several subconditions - so we integrated several reg exp each one representing a simple condition*/
/* we add a look ahead clause to check that the swapping occurs only between the if ... then limits, otherwise to assignment could get hurt (a=b becomes a==b);
*&*
(\s+(else)*if)(\s*.*?[^<>]\s*(=))(\s*.*?[^<>]\s*(=))?(\s*.*?[^<>]\s*(=))?(\s*.*?[^<>]\s*(=))?(\s*.*?[^<>]\s*(=))?(\s*.*?[^<>]\s*(=))?(?=.*then)
*^*
$1$3$4$5$6$7$8$9$10$11$12$13$14
*&*


/* if/elseif as part of a block - with remark at the end of the line */
*&*
([\r\n]+\s*if|\s+elseif)[ \t]*(.*?)[ \t]*then(?=[ \t]+')
*^*
$1 ($2){
*&*



/* if/elseif in one line */
*&*
([\r\n]+\s*if|\s+elseif|\s+else)[\s]*(.*?)\s*then(?=[ \t]+\w)
*^*
$1 ($2)
*&*


/* if/elseif as part of a block */
*&*
([\r\n]+\s*if|\s+elseif)[\s]*(.*?)\s*then(?=[ \t]*[\r\n]+)
*^*
$1 ($2){
*&*

/* else as part of a block. #1 - addition from the future - i also found that placing a remark after an else is a common use, hence the inclusion of an apostrophe in the charset following the 'else' string */
*&*
(\s+else)[ \t']*(?=[\r\n])
*^*
$1{
*&*




*&*
(\n\s*)(else|elseif|else if)
*^*
$1}$2
*&*

*&*
elseif
*^*
else if
*&*

*&*
end if
*^*
}
*&*


*&*
(\s+)select[ \t]+case\s+([^\s]+)
*^*
$1switch($2){
*&*

*&&*
(\s+)case[ \t]+([^ \t\:]+)(?=[ \t]*[\r\n'])
*^*
$1case $2:
*&&*

/* the above rule predicts that the case confition is followed by a linebreak (and then the execution block). but i stumbled into instances where between the condition and the execution block stood only a space.but solving them causes major bugs in cases that the case condition contains colon (:)*/
*&&*
(\n\s+)case[ \t]+([^ \t\:]+)
*^*
$1case $2:
*&&*

*&*
([^{\s][ \t]*)([\n\r]+\s+)case
*^*
$1$2break;$2case
*&*

*&*
(\n\s*)case else
*^*
$1default
*&*

*&*
(\s+)case(\s+)
*^*
$1case$2
*&*

*&*
(\n\s*)end select
*^*
$1}
*&*

/* replacing ampersand with a plus sign (not in brackets) - phase 1 - first occurrence in line - phase2 was neutralised (because it got stuck with certain files), so there is no use of phase1. */
*&&*
(\n[^\n"]*?)&
*^*
$1+
*&&*

/* replacing ampersand with a plus sign (not in brackets) - phase 2 - all occurrences in line except the first one - replaced it with function (convertAmpToPlus) because it got stuck with certain files. e.g. aznhool_calc.htm */
*&&*
(\n([^\n"]*?("[^\n"]*")[^\n"&]*?)+?)&
*^*
$1+
*^*
10
*&&*

*&*
(\s+)and(\s+)
*^*
$1&&$2
*&*

*&*
(\s+)or(\s+)
*^*
$1||$2
*&*

*&*
([\s(]+)not([\s)]+)
*^*
$1!$2
*&*


*&*
(\n[ \t]+)(call)?(\s*)(\w+)(\s+\n)
*^*
$1$3$4()$5
*&*


*&*
(\n[ \t]+)call\s*(\w+)
*^*
$1$2
*&*

/* replacing round brackets in array definition on the arguments declaration line (dim) with square brackets - part 1*/
*&*
(\n[ \t]*)dim([^\r\n(]*)\(
*^*
$1dim$2[
*^*
100
*&*

/* replacing round brackets in array definition on the arguments declaration line (dim) with square brackets - part 2*/
*&*
(\n[ \t]*)dim([^\r\n)]*)\)
*^*
$1dim$2]
*^*
100
*&*

*&*
(\n[ \t]*)dim(\s+)
*^*
$1var$2
*&*

*&*
(\s+)set(\s+)
*^*
$1
*&*

*&*
(\n+\s*)'
*^*
$1//
*&*


*&&^^everlasting1*
(\n+\s*)(((([^"\n\r]*"[^"\n\r]*")\s*[+&]*\s*)*)|[^"\n]*)(')
*^*
$1$2; // $7
*&&^^everlasting1*

/* replacing everlasting1 */
*&*
(\n+\s*)'
*^*
$1//
*&*

/* replacing everlasting1 */
*&*
'([^"]*?\n)
*^*
//$1
*&*

*&&^^everlasting2*
(\n+\s*)(((([^"\n\r]*"[^"\n\r]*")[^"\n]*)*)|[^"\n]*)(<>)(.*)
*^*
$1$2!=$7
*^*
100
*&&^^everlasting2*

/* we are not using the above regexp (everlasting2) because it's taking eternity to process. in lack of better solution, we'll just replace the chars*/
*&*
<>
*^*
!=
*&*


*&*
(\n+\s*)(([^"\n\r]*"[^"\n]*")*)([^"\n]*)("[^"\n]*)("")([^"\n]*")
*^*
$1$2$4$5\"$7
*^*
10
*&*

*&*
((?:tbodies|rows|cells|options)\s*)(?:\()(([^()]*\(){1}([^()]*\)){1})\s*(?:\))
*^*
$1[$2]
*&*

*&*
((?:tbodies|rows|cells|options)\s*)(?:\()(([^()]*\(){2}([^()]*\)){2})\s*(?:\))
*^*
$1[$2]
*&*

*&*
((?:tbodies|rows|cells|options)\s*)(?:\()(([^()]*\(){3}([^()]*\)){3})\s*(?:\))
*^*
$1[$2]
*&*

*&*
((?:tbodies|rows|cells|options)\s*)(?:\()([^)]*)(?:\))
*^*
$1[$2]
*&*


*&*
([^\w])If([^\w])
*^*
$1if$2
*&*

*&*
([^\w])Else([^\w])
*^*
$1else$2
*&*

*&*
\blcase\b
*^*
String.toLowerCase
*&*

*&*
\bcdbl\b
*^*
parseFloat
*&*

*&*
split[\s(]+(\w+)\s*[,]\s*["]([^"]+)["]\s*[)]+(\s+)
*^*
$1.split("$2")$3
*&*

*&*
([^\w])isdate([^\w])
*^*
$1vbConverter.isdate$2
*&*

*&*
([^\w])isnumeric([^\w])
*^*
$1vbConverter.isnumeric$2
*&*

*&*
([^\w])isarray([^\w])
*^*
$1vbConverter.isarray$2
*&*

*&*
([^\w])lbound([^\w])
*^*
$1vbConverter.lbound$2
*&*

*&*
([^\w])ubound([^\w])
*^*
$1vbConverter.ubound$2
*&*

*&*
([^\w])formatnumber([^\w])
*^*
$1vbConverter.formatnumber$2
*&*

*&*
([^\w])trim([^\w])
*^*
$1vbConverter.trim$2
*&*

*&*
([^\w])len([^\w])
*^*
$1vbConverter.len$2
*&*

*&*
([^\w])left([^\w])
*^*
$1vbConverter.left$2
*&*

*&*
([^\w])right([^\w])
*^*
$1vbConverter.right$2
*&*

*&*
([^\w])mid([^\w])
*^*
$1vbConverter.mid$2
*&*

*&*
([^\w])space([^\w])
*^*
$1vbConverter.space$2
*&*

*&*
([^\w])instr([^\w])
*^*
$1vbConverter.instr$2
*&*

*&*
([^\w])day([^\w])
*^*
$1vbConverter.day$2
*&*

*&*
([^\w])month([^\w])
*^*
$1vbConverter.month$2
*&*

*&*
([^\w])year([^\w])
*^*
$1vbConverter.year$2
*&*

*&*
([^\w])weekday([^\w])
*^*
$1vbConverter.weekday$2
*&*

*&*
([^\w])dateserial([^\w])
*^*
$1vbConverter.dateserial$2
*&*

*&*
([^\w])cint([^\w])
*^*
$1vbConverter.cint$2
*&*

*&*
([^\w])cstr([^\w])
*^*
$1vbConverter.cstr$2
*&*

*&*
([^\w])cdate([^\w])
*^*
$1vbConverter.cdate$2
*&*

*&*
([^\w])exp([^\w])
*^*
$1vbConverter.exp$2
*&*

*&*
([^\w])clng([^\w])
*^*
$1vbConverter.clng$2
*&*

*&*
([^\w])round([^\w])
*^*
$1vbConverter.round$2
*&*

*&*
([^\w])chr([^\w])
*^*
$1vbConverter.chr$2
*&*

*&*
([^\w])replace([^\w])
*^*
$1vbConverter.replace$2
*&*

*&*
([^\w])datediff([^\w])
*^*
$1vbConverter.datediff$2
*&*

*&*
([^\w])dateadd([^\w])
*^*
$1vbConverter.dateadd$2
*&*

/* if we have a line with only one alphanumeric string in it, then we probably have a vb function call on our hand, and we have to transform it into js function call (by adding parentheses)*/
*&*
([\r\n]+\s*[a-z0-9A-Z_]+)([ \t]*)(?=[\r\n])
*^*
$1()$2
*&*

/* semicolon at the end of each line. should be  at the end of the rules file */
*&*
([^{}:>; \t\r\n]+)([ \t]*(\r|\n)+)
*^*
$1;$2
*&*

